apiVersion: apps/v1
kind: Deployment
metadata:
  name: wappalyzer
  labels:
    app: wappalyzer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wappalyzer
  template:
    metadata:
      labels:
        app: wappalyzer
      annotations:
        linkerd.io/inject: enabled
        config.linkerd.io/skip-outbound-ports: "80,443"
        config.linkerd.io/proxy-cpu-request: 1m
        config.linkerd.io/proxy-memory-request: 4Mi
    spec:
      imagePullSecrets:
        - name: ghcr
      containers:
        - name: wappalyzer
          image: busybox
          command:
            - node
            - /app/server.js
          livenessProbe:
            exec:
              command:
                - /app/grpc_health_probe
                - -addr=:8080
          readinessProbe:
            exec:
              command:
                - /app/grpc_health_probe
                - -addr=:8080
          ports:
            - containerPort: 8080
              name: grpc
              protocol: TCP
          resources:
            requests:
              cpu: 300m
              memory: 395Mi
            limits:
              cpu: "1"
              memory: 1Gi
          env:
            - name: GRPC_PORT
              valueFrom:
                configMapKeyRef:
                  key: port
                  name: grpc
            - name: STAN_CLUSTERID
              valueFrom:
                configMapKeyRef:
                  key: clusterid
                  name: stan
            - name: NATS_URL
              valueFrom:
                configMapKeyRef:
                  key: url
                  name: nats
            - name: STAN_SUBJECTCOMPANYNEW
              valueFrom:
                configMapKeyRef:
                  key: subjectcompanynew
                  name: stan
            - name: STAN_SUBJECTANALYZERESULT
              valueFrom:
                configMapKeyRef:
                  key: subjectanalyzeresult
                  name: stan
            - name: LOGLEVEL
              value: error

---
apiVersion: v1
kind: Service
metadata:
  name: wappalyzer
  labels:
    app: wappalyzer
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    app: wappalyzer

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: wappalyzer-restart
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: wappalyzer-restart
rules:
  - apiGroups:
      - "apps"
      - "extensions"
    resources:
      - "deployments"
    resourceNames:
      - "wappalyzer"
    verbs:
      - "get"
      - "patch"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: wappalyzer-restart
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: wappalyzer-restart
subjects:
  - kind: ServiceAccount
    name: wappalyzer-restart
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: wappalyzer-restart
spec:
  concurrencyPolicy: Forbid
  schedule: "0 */3 * * *"
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 600
      template:
        spec:
          serviceAccountName: wappalyzer-restart
          restartPolicy: Never
          containers:
            - name: kubectl
              image: bitnami/kubectl
              command:
                - "kubectl"
                - "rollout"
                - "restart"
                - "deploy/wappalyzer"
